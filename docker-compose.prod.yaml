services:
  fe-prod:
    image: node:20.12-buster
    command: ["sh", "-c", "npm install && npm run prod"]
    working_dir: /app
    volumes:
      - ./frontend/:/app
    ports:
      - 8081:8081
    environment:
      - CHOKIDAR_USEPOLLING=true

  be-prod:
    image: gradle:8.10.2-jdk21
    command: ["sh", "-c", "DB_IP=172.17.0.1 gradle bootRun"]
    working_dir: /app
    environment:
      SPRING_PROFILES_ACTIVE: prod
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backend/:/app
    ports:
      - 8082:8080

  nginx-prod:
    image: nginx:latest
    container_name: nginx-gateway-prod
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/prod/certbot-webroot:/var/www/certbot
      - ./nginx/prod/certbot-etc:/etc/letsencrypt:ro
      - ./nginx/prod/nginx.conf:/etc/nginx/nginx.conf:ro
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
    restart: unless-stopped

  db-prod:
    image: postgres
    container_name: postgres-prod
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/dbdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
#  certbot:
#    image: certbot/certbot:latest
#    container_name: certbot
#    volumes:
#      - ./nginx/prod/certbot-webroot:/var/www/certbot
#      - ./nginx/prod/certbot-etc:/etc/letsencrypt
#    # simple renew loop + nginx reload in the other container
#    command: >
#      sh -c 'trap exit TERM;
#      while :; do
#        certbot renew --webroot -w /var/www/certbot
#          --deploy-hook "docker exec nginx nginx -s reload";
#        sleep 12h & wait $!;
#      done'
#    restart: unless-stopped

#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8083:8080
