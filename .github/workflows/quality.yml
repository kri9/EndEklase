# Quality & Security pipeline for backend Gradle project located in ./backend
# Requires repository secrets:
#   SONAR_TOKEN       ‚Üí authentication token (SonarQube or SonarCloud)
#   SONAR_HOST_URL    ‚Üí optional, e.g. "https://sonarcloud.io" (defaults to SonarCloud)

name: quality-checks

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build-and-analyze:
    name: Build ‚Ä¢ Static / Dynamic Analysis (backend)
    runs-on: ubuntu-latest

    permissions:
      contents: read           # checkout
      pull-requests: write     # annotate PR with results
      checks: write            # GitHub Checks API summaries

    steps:
    - name: ‚¨áÔ∏è Checkout source
      uses: actions/checkout@v4

    - name: ‚òï Set up JDK¬†21
      uses: actions/setup-java@v4
      with:
        distribution: "temurin"
        java-version: "21"
        cache: "gradle"

    # Gradle wrapper validation + dependency caching
    - name: ‚ö° Gradle build action (cache)
      uses: gradle/gradle-build-action@v3
      with:
        build-root-directory: backend

    # ------------------------------------------------------------------
    # 1) Compile, unit‚Äëtest and run ALL quality gates defined in build.gradle
    #    (checkstyle, pmd, spotbugs, OWASP Dependency‚ÄëCheck, PIT, JaCoCo‚Ä¶)
    # ------------------------------------------------------------------
    - name: üèóÔ∏è Gradle quality check
      run: ./gradlew --no-daemon check jacocoTestReport pitest
      working-directory: backend

    # ------------------------------------------------------------------
    # 2) Upload the generated HTML / XML / SARIF reports as artifacts
    # ------------------------------------------------------------------
    - name: üì¶ Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: backend/build/reports/**

    # ------------------------------------------------------------------
    # 3) Push coverage & metrics to Sonar (optional but recommended)
    # ------------------------------------------------------------------
    - name: üîç Sonar analysis
      if: env.SONAR_TOKEN != ''
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: ./gradlew --no-daemon sonarqube \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL || 'https://sonarcloud.io' }}
      working-directory: backend

  # --------------------------------------------------------------
  # Optional: publish OWASP Dependency‚ÄëCheck SARIF to "Code scanning"
  # --------------------------------------------------------------
  upload-owasp-sarif:
    name: Publish CVE scan to Code Scanning
    if: success() && github.event_name == 'pull_request'
    needs: build-and-analyze
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    steps:
    - name: üîΩ Download report artifact
      uses: actions/download-artifact@v4
      with:
        name: quality-reports

    - name: üì§ Upload SARIF to Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: backend/build/reports/dependency-check/dependency-check-report.sarif

